name: sharding-repl-cache

services:

  pymongo_api:
    container_name: pymongo_api
    build: 
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - mongos_router
    ports:
      - 8080:8080
    environment:
      MONGODB_URL: "mongodb://mongos_router:27017"
      MONGODB_DATABASE_NAME: "somedb"
      REDIS_URL: "redis://redis:6379"
    networks:
      app-network:
      
  # сервер конфигурации
  configSrv:
    image: mongo:latest # docker образ
    container_name: configSrv
    restart: always
    ports:
      - "27019:27019"
    networks:
      app-network:
        ipv4_address: 173.17.0.10
    volumes:
      - config-data:/data/db
      - config-data-config:/data/configdb
    command:
      [
        "--configsvr",  # запуск в режиме конфигурации
        "--replSet",
        "config_server",
        "--bind_ip_all"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--port", "27019", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
      retries: 2

  # 1-й шард
  shard1_1:
    image: mongo:latest
    container_name: shard1_1
    restart: always
    networks:
      app-network:
        ipv4_address: 173.17.0.20
    volumes:
      - shard1_1-data:/data/db
    command:
      [
        "--shardsvr", # запуск в режиме шардинга
        "--replSet",
        "shard1", # название реплики
        "--bind_ip_all"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--port", "27018", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
      retries: 2
      
  shard1_2:
    image: mongo:latest
    container_name: shard1_2
    restart: always
    networks:
      app-network:
        ipv4_address: 173.17.0.21
    volumes:
      - shard1_2-data:/data/db
    command:
      [
        "--shardsvr", # запуск в режиме шардинга
        "--replSet",
        "shard1", # название реплики
        "--bind_ip_all"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--port", "27018", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
      retries: 2
      
  shard1_3:
    image: mongo:latest
    container_name: shard1_3
    restart: always
    networks:
      app-network:
        ipv4_address: 173.17.0.22
    volumes:
      - shard1_3-data:/data/db
    command:
      [
        "--shardsvr", # запуск в режиме шардинга
        "--replSet",
        "shard1", # название реплики
        "--bind_ip_all"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--port", "27018", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
      retries: 2

  # 2-й шард
  shard2_1:
    image: mongo:latest
    container_name: shard2_1
    restart: always
    networks:
      app-network:
        ipv4_address: 173.17.0.30
    volumes:
      - shard2_1-data:/data/db
    command:
      [
        "--shardsvr", # запуск в режиме шардинга
        "--replSet",
        "shard2", # название реплик
        "--bind_ip_all" # обратите внимание - она отличается от реплики 1-го шарда
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--port", "27018", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
      retries: 2
      
  shard2_2:
    image: mongo:latest
    container_name: shard2_2
    restart: always
    networks:
      app-network:
        ipv4_address: 173.17.0.31
    volumes:
      - shard2_2-data:/data/db
    command:
      [
        "--shardsvr", # запуск в режиме шардинга
        "--replSet",
        "shard2", # название реплик
        "--bind_ip_all" # обратите внимание - она отличается от реплики 1-го шарда
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--port", "27018", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
      retries: 2
  
  shard2_3:
    image: mongo:latest
    container_name: shard2_3
    restart: always
    networks:
      app-network:
        ipv4_address: 173.17.0.32
    volumes:
      - shard2_3-data:/data/db
    command:
      [
        "--shardsvr", # запуск в режиме шардинга
        "--replSet",
        "shard2", # название реплик
        "--bind_ip_all" # обратите внимание - она отличается от реплики 1-го шарда
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--port", "27018", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
      retries: 2
  
  # роутер
  mongos_router:
    image: mongo:latest
    container_name: mongos_router
    restart: always
    ports:
      - "27017:27017"
    networks:
      app-network:
        ipv4_address: 173.17.0.100
    volumes:
      - mongos-router-data:/data/db
    command:
      [
        "mongos", # обычная mongo в режиме роутера
        "--configdb",
        "config_server/configSrv:27019", #передача данных сервера конфигурации
        "--bind_ip_all",
        "--port",
        "27017"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
      retries: 2
      
  redis:
    image: "redis:latest"
    container_name: redis
    ports:
      - "6379"
    volumes:
      - redis_data:/data
    networks:
      app-network:
        ipv4_address: 173.17.0.110

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.17.0.0/16

volumes:
  config-data:
  config-data-config:
    
  shard1_1-data:
  shard1_2-data:
  shard1_3-data:
    
  shard2_1-data:
  shard2_2-data:
  shard2_3-data:
  
  mongos-router-data:
  
  redis_data:
